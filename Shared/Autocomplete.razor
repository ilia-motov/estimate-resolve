@using EstimateResolve.Services;
@typeparam T where T : class, IDto

<MudAutocomplete T="T"
                 Label=@Label
                 @bind-Value="Value"
                 @bind-Value:after="UpdateValue"
                 SearchFunc="@Search"
                 ToStringFunc="@(d => d == null ? null : d.Name)"
                 ShowProgressIndicator="true"
                 ProgressIndicatorColor="Color.Default"
                 @ref="_autocomplete">
    <NoItemsTemplate>
        <MudText Align="Align.Center" Class="px-4 py-1">
            Ничего не найдено
            <MudButton
                Class="mb-16"
                Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="@(async () => await Create())">
                Создать
            </MudButton>
        </MudText>
    </NoItemsTemplate>
</MudAutocomplete>

@code {
    private MudAutocomplete<T>? _autocomplete;

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Inject]
    public IController<T> Controller { get; set; }

    [Inject]
    public ICreateDialogService CreateDialogService { get; set; }

    private async Task<IEnumerable<T>> Search(string value) =>
        await Controller.Autocomplete(value);

    private async Task UpdateValue() => await ValueChanged.InvokeAsync(Value);

    private async Task Create()
    {
        var name = _autocomplete.Text;
        await _autocomplete.Clear();

        var value = await CreateDialogService.Show<T>(name);
        if (value is null)
            return;

        _autocomplete.Value = value;
        _autocomplete.Text = value.Name;

        Value = value;
        await UpdateValue();
    }
}
